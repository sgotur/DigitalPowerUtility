AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Timestream database and a tables and scheduled query
Parameters:
  TSDatabase:
    Type: String
    Default: sample
  TSTable:
    Type: String
    Default: dw_data
  S3BucketName:
    Type: String
    Default: sg-dpu-timestream-0831
    Description: Name of the new bucket to send timestream errors to
  S3AccessLogsBucketName:
    Type: String
    Default: sg-dpu-error-log-0831
    Description: Name of the bucket to send S3 access logs to, from the bucket this template will create
  S3Prefix:
    Type: String
    Default: myquery
    Description: >
      Prefix to save scheduled query errors.
      Timestream will append a slash
  SQEnabledSelector:
    Description: Select the lab to be created
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Type: String
  Params:
    Description: Params send to custom resource
    Type: String
    Default: "arg1,arg2,arg3"
Conditions:
  EnableSQ: !Equals
    - !Ref SQEnabledSelector
    - "true"
Resources:
  MyDatabase:
    Type: AWS::Timestream::Database
  MyTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref MyDatabase
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: "24"
        MagneticStoreRetentionPeriodInDays: "7"
  MyAggregatedTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TSDatabase
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: "24"
        MagneticStoreRetentionPeriodInDays: "7"

  ScheduledQueryExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      #RoleName: timestream-scheduled-query-test
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "timestream.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      #      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/amp_boundary_policy"
      ManagedPolicyArns:
        #      - !Sub "arn:aws:iam::${AWS::AccountId}:policy/amp_deny_policy"
        - !Ref SQPolicy
  SQPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Allow timestream scheduled query"
      #ManagedPolicyName: timestream-sq-test
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref ScheduledQuerySNS
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub "${S3Bucket.Arn}/${S3Prefix}/*"
          - Effect: Allow
            Action:
              - timestream:DescribeEndpoints
              - timestream:SelectValues
            Resource:
              - "*" # cannot be restricted
          - Effect: Allow
            Action:
              - timestream:Select
            Resource:
              - !GetAtt MyTable.Arn
          - Effect: Allow
            Action:
              - timestream:Select # is this required?
              - timestream:WriteRecords
            Resource:
              - "*" #GetAtt MyAggregatedTable.Arn

  MyScheduledQuery:
    Type: AWS::Timestream::ScheduledQuery
    Condition: EnableSQ
    # DependsOn: CustomResource
    Properties:
      ErrorReportConfiguration:
        S3Configuration:
          BucketName: !Ref S3Bucket
          ObjectKeyPrefix: !Ref S3Prefix
      NotificationConfiguration:
        SnsConfiguration:
          TopicArn: !Ref ScheduledQuerySNS
      QueryString: !Sub |
        with pivot as (
        select meter_id,time,
        case when measure_name = 'current' then measure_value::double end as current,
        case when measure_name = 'rssi' then measure_value::double end as rssi,
        case when measure_name = 'pf' then measure_value::double end as pf,
        case when measure_name = 'voltage' then measure_value::double end as voltage 
        FROM "harmonics"."customer-meter-data-raw"
        where time between bin(now(), 5m) - 1h AND now()
        )
        select meter_id,time,
        max("current") as "current",
        max("rssi") as "rssi",
        max("pf") as "pf",
        max("voltage") as "voltage",
        'Customer-Meter' as "measure_name"
        from pivot
        group by meter_id, time
      ScheduleConfiguration:
        ScheduleExpression: "rate(1 minutes)"
      ScheduledQueryExecutionRoleArn: !GetAtt ScheduledQueryExecutionRole.Arn
      TargetConfiguration:
        TimestreamConfiguration:
          DatabaseName: !Ref TSDatabase
          DimensionMappings:
            - DimensionValueType: "VARCHAR"
              Name: "meter_id"
          MeasureNameColumn: "measure_name"
          MultiMeasureMappings:
            MultiMeasureAttributeMappings:
              - MeasureValueType: "DOUBLE"
                SourceColumn: "current"
                TargetMultiMeasureAttributeName: "current"
              - MeasureValueType: "DOUBLE"
                SourceColumn: "rssi"
                TargetMultiMeasureAttributeName: "rssi"
              - MeasureValueType: "DOUBLE"
                SourceColumn: "pf"
                TargetMultiMeasureAttributeName: "pf"
              - MeasureValueType: "DOUBLE"
                SourceColumn: "voltage"
                TargetMultiMeasureAttributeName: "voltage"
          TableName: !GetAtt MyAggregatedTable.Name
          TimeColumn: "time"
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: MyScheduledQuery
    Properties:
      Handle: !Ref 'WaitHandle'
      Timeout: '5000'
 
  MyCorrelatedScheduledQuery:
    Type: AWS::Timestream::ScheduledQuery
    Condition: EnableSQ
    # DependsOn: CustomResource
    Properties:
      ErrorReportConfiguration:
        S3Configuration:
          BucketName: !Ref S3Bucket
          ObjectKeyPrefix: !Ref S3Prefix
      NotificationConfiguration:
        SnsConfiguration:
          TopicArn: !Ref ScheduledQuerySNS
      QueryString: !Sub |
        WITH cud_result AS (
        SELECT meter_id,INTERPOLATE_LINEAR(
            CREATE_TIME_SERIES(time, meter_measure_value),
            SEQUENCE(min('2022-09-01 08:00:00.00000000'), max('2022-09-30 00:00:00.000000000'), 10m)) AS result 
        FROM "harmonics"."customer-meter-data"  
        WHERE measure_name = 'meter-reading' 
          AND time  between bin(now(), 5m) - 1h AND now() 
        GROUP BY  meter_id, measure_name
        ), 
        hmd_result AS (
            SELECT harmonic_meter_series_id, INTERPOLATE_LINEAR(
                CREATE_TIME_SERIES(time, meter_measure_value), 
              SEQUENCE(min('2022-09-01 08:00:00.00000000'), max('2022-09-30 00:00:00.000000000'), 10m)) AS result  
            FROM "harmonics"."harmonic-meter-data"  
            WHERE measure_name = 'meter-reading' 
           AND time  between bin(now(), 5m) - 1h AND now() 
            GROUP BY  harmonic_meter_series_id, measure_name
        ) 
        SELECT cud_result.meter_id, hmd_result.harmonic_meter_series_id, correlate_pearson(cud_result.result, hmd_result.result) AS result 
        FROM cud_result, hmd_result
        order by 1,2

      ScheduleConfiguration:
        ScheduleExpression: "rate(1 hour)"
      ScheduledQueryExecutionRoleArn: !GetAtt ScheduledQueryExecutionRole.Arn
      TargetConfiguration:
        TimestreamConfiguration:
          DatabaseName: !Ref TSDatabase
          DimensionMappings:
            - DimensionValueType: "VARCHAR"
              Name: "meter_id"
          MeasureNameColumn: "measure_name"
          MultiMeasureMappings:
            MultiMeasureAttributeMappings:
              - MeasureValueType: "DOUBLE"
                SourceColumn: "current"
                TargetMultiMeasureAttributeName: "current"
              - MeasureValueType: "DOUBLE"
                SourceColumn: "rssi"
                TargetMultiMeasureAttributeName: "rssi"
              - MeasureValueType: "DOUBLE"
                SourceColumn: "pf"
                TargetMultiMeasureAttributeName: "pf"
              - MeasureValueType: "DOUBLE"
                SourceColumn: "voltage"
                TargetMultiMeasureAttributeName: "voltage"
          TableName: !GetAtt MyAggregatedTable.Name
          TimeColumn: "time"

  ScheduledQuerySNS:
    Type: AWS::SNS::Topic

  S3Bucket:
    # DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Description: Test for timestream scheduled query
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      # LoggingConfiguration:
      #   DestinationBucketName: !Ref S3AccessLogsBucketName
      #   LogFilePrefix: ${S3AccessLogsBucketName}/${S3BucketName}/

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # S3 API allows unencrypted traffic by default
          - Sid: Require TLS
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:*"
            Resource:
              - !Sub "${S3Bucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

Outputs:
  DatabaseName:
    Description: Timestream Database Name
    Value: !Ref MyDatabase
  TableName:
    Description: Timestream Table Name
    Value: !GetAtt MyTable.Name
